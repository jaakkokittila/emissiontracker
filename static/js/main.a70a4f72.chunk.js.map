{"version":3,"sources":["API_SP.POP.TOTL_DS2_en_xml_v2_10224853.xml","API_EN.ATM.CO2E.KT_DS2_en_xml_v2_10227343.xml","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","react_default","a","createElement","App_Interface","Component","Interface","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","selected","searchItem","population","emissions","textfield","matches","countries","selectedCountry","data","infobox","loadFile","bind","assertThisInitialized","handleChange","handleSubmit","matchClick","people","co2","_this2","countryMatches","xx","length","toLowerCase","substring","push","countryMatchList","id","map","country","onClick","setState","parser","DOMParser","parseFromString","numbers","getElementsByName","year","maxYear","i","textContent","dataTable","x","finalTable","e","event","_this3","target","value","type","checked","name","defineProperty","formTable","formData","filename","boolean","allText","rawFile","XMLHttpRequest","open","onreadystatechange","readyState","status","responseText","parsed","countryNames","send","_this4","_this5","toUpperCase","preventDefault","onSubmit","onChange","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a70a4f72.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/API_SP.POP.TOTL_DS2_en_xml_v2_10224853.fd0764c9.xml\";","module.exports = __webpack_public_path__ + \"static/media/API_EN.ATM.CO2E.KT_DS2_en_xml_v2_10227343.acf34dce.xml\";","import React, { Component } from 'react';\nimport './App.css';\n\nimport people from './API_SP.POP.TOTL_DS2_en_xml_v2_10224853.xml';\nimport co2 from './API_EN.ATM.CO2E.KT_DS2_en_xml_v2_10227343.xml';\n\nclass App extends Component {\n  render() {\n    return (\n      <Interface />\n    );\n  }\n}\n\nclass Interface extends Component{\n  constructor(){\n    super();\n    this.state ={\n      selected: false,\n      searchItem: \"\",\n      population: null,\n      emissions: null,\n      textfield: \"Select a country\",\n      matches: null,\n      countries: [],\n      selectedCountry: null,\n      data: null,\n      infobox: null\n    }\n    this.loadFile = this.loadFile.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.matchClick = this.matchClick.bind(this);\n    \n    \n  }\n  componentDidMount(){\n   \n    this.loadFile(people, true);\n    this.loadFile(co2, false);\n    \n   \n    \n  }\n  \n\n  formData () {\n   \n\n    var countryMatches = [];\n   \n    \n    for (var xx = 0; xx < this.state.countries.length; xx++){\n      if (this.state.textfield.toLowerCase() === this.state.countries[xx].substring(0, this.state.textfield.length).toLowerCase() && this.state.textfield.length > 1){\n        countryMatches.push(this.state.countries[xx]);\n      }\n    }\n    \n    var countryMatchList = <ul id=\"matchlist\">{countryMatches.map((country) => \n    <li onClick={() => this.matchClick(country)}>{country} </li>)}</ul>;\n    this.setState({matches: countryMatchList});\n    \n    \n    }\n    \n  formTable(){\n  try{\n    \n   \n    var parser = new DOMParser();\n    \n    var people = parser.parseFromString(this.state.population, 'text/xml');\n    var co2 = parser.parseFromString(this.state.emissions, 'text/xml');\n    var numbers = [];\n    var countries = people.getElementsByName(\"Country or Area\");\n    var year = people.getElementsByName(\"Year\");\n    var maxYear= 0;\n    for (var i = 0; i < countries.length; i++){\n      if(countries[i].textContent === this.state.selectedCountry){\n        numbers.push(i);\n        maxYear = year[i].textContent;\n        }\n    }\n    var dataTable = [];\n\n    for (var x = 0; x < numbers.length; x++){\n      \n      if(this.state.selected === true){\n        dataTable.push(<tr><th>{maxYear - x }</th><th>{people.getElementsByName(\"Value\")[numbers[numbers.length - x -1 ]].textContent}</th>\n        <th>{co2.getElementsByName(\"Value\")[numbers[numbers.length - x - 1]].textContent / people.getElementsByName(\"Value\")[numbers[numbers.length - x - 1]].textContent}</th></tr>);\n      }else{\n        dataTable.push(<tr><th>{maxYear - x}</th><th>{people.getElementsByName(\"Value\")[numbers[numbers.length - x -1]].textContent}</th>\n        <th>{co2.getElementsByName(\"Value\")[numbers[numbers.length - x - 1]].textContent}</th></tr>);\n      }\n     \n    }\n    var finalTable = <tbody>{dataTable}</tbody>\n    this.setState({data: finalTable});\n \n   \n  }catch(e){\n  \n  }\n\n  }  \n \n \n  handleChange(event) {\n    const target = event.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n   \n    if(target.type === 'checkbox'){\n      this.setState({\n        [name]: value\n        \n      }, () =>this.formTable());\n    }else{\n      this.setState({\n        [name]: value\n        \n      });\n    }\n    \n    this.formData();\n    \n    \n   \n  }\n \n  \n  loadFile(filename, boolean){\n    \n    var rawFile = new XMLHttpRequest();\n    var allText;\n    rawFile.open(\"GET\", filename);\n    rawFile.onreadystatechange = function (){\n      if(rawFile.readyState === 4){\n        if(rawFile.status === 200 || rawFile.status === 0){\n            allText = rawFile.responseText;\n            var parser = new DOMParser();\n            var parsed = parser.parseFromString(allText, 'text/xml');\n            if (boolean === true){\n              var countries = parsed.getElementsByName(\"Country or Area\");\n              var countryNames = [];\n              for (var x = 0; x < countries.length; x++){\n                if(countries[x].textContent !== countryNames[countryNames.length-1]){\n                  countryNames.push(countries[x].textContent);\n                }\n              }\n              this.setState({countries: countryNames});\n              this.setState({population: allText});\n            }else{\n              this.setState({emissions: allText});\n            }\n        }\n    }\n}.bind(this);\n  rawFile.send(null);\n\n  }\n  matchClick(country){\n    this.setState({selectedCountry:country }, ()=> {this.formTable()});\n  }\n \n  \n  handleSubmit(event){\n    this.setState({selectedCountry: this.state.textfield.substring(0,1).toUpperCase() + \n      this.state.textfield.substring(1, this.state.textfield.length)}, () =>{this.formTable()});\n    this.formTable();\n    event.preventDefault();\n  }\n\n  render(){\n    return(\n      <div id=\"interface\">\n      <h1>CO2 Emissions</h1>\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Country: \n          <input\n            \n            name=\"textfield\"\n            type=\"text\"\n            value={this.state.textfield}\n            onChange={this.handleChange} /></label><button onClick={this.handleSubmit}>Search</button>\n            <div>{this.state.matches}</div>\n        \n        \n        <br />\n        <label>\n          Per Capita:\n          <input\n            name=\"selected\"\n            type=\"checkbox\"\n            checked={this.state.selected}\n            onChange={this.handleChange} />\n        </label>\n      </form>\n      <h2>{this.state.selectedCountry}</h2>\n      <div id=\"data\"><table><tr><th></th><th>Population</th><th>Emissions</th></tr>{this.state.data}</table></div>\n      <div>{this.state.infobox}</div>\n      <footer>\n        <p>Jaakko Kittilä - 2019</p>\n        <p>jaakko.kittila@gmail.com</p>\n      </footer>\n      </div>\n      );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}